{
  "manifest": {
    "name": "@zk-kit/incremental-merkle-tree.sol",
    "version": "1.3.3",
    "description": "Incremental Merkle tree Solidity libraries.",
    "license": "MIT",
    "files": [
      "**/*.sol",
      "!test/",
      "README.md"
    ],
    "keywords": [
      "blockchain",
      "ethereum",
      "hardhat",
      "smart-contracts",
      "solidity",
      "libraries",
      "merkle-tree",
      "incremental-merkle-tree"
    ],
    "repository": {
      "type": "git",
      "url": "git@github.com:privacy-scaling-explorations/zk-kit.git"
    },
    "homepage": "https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/incremental-merkle-tree.sol",
    "author": {
      "name": "Cedoor",
      "email": "me@cedoor.dev",
      "url": "https://cedoor.dev"
    },
    "publishConfig": {
      "access": "public"
    },
    "_registry": "npm",
    "_loc": "/mnt/c/Users/CCL/Desktop/next_discussion_platform-main/backend/.yarn-cache/v6/npm-@zk-kit-incremental-merkle-tree-sol-1.3.3-ec091912bd6862e978b7b693fcd35b5004d16017-integrity/node_modules/@zk-kit/incremental-merkle-tree.sol/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n    <h1 align=\"center\">\n         Incremental Merkle Trees (Solidity)\n    </h1>\n    <p align=\"center\">Incremental Merkle tree Solidity libraries.</p>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/privacy-scaling-explorations/zk-kit\">\n        <img src=\"https://img.shields.io/badge/project-zk--kit-blue.svg?style=flat-square\">\n    </a>\n    <a href=\"https://github.com/privacy-scaling-explorations/zk-kit/blob/main/LICENSE\">\n        <img alt=\"Github license\" src=\"https://img.shields.io/github/license/privacy-scaling-explorations/zk-kit.svg?style=flat-square\">\n    </a>\n    <a href=\"https://www.npmjs.com/package/@zk-kit/incremental-merkle-tree.sol\">\n        <img alt=\"NPM version\" src=\"https://img.shields.io/npm/v/@zk-kit/incremental-merkle-tree.sol?style=flat-square\" />\n    </a>\n    <a href=\"https://npmjs.org/package/@zk-kit/incremental-merkle-tree.sol\">\n        <img alt=\"Downloads\" src=\"https://img.shields.io/npm/dm/@zk-kit/incremental-merkle-tree.sol.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://eslint.org/\">\n        <img alt=\"Linter eslint\" src=\"https://img.shields.io/badge/linter-eslint-8080f2?style=flat-square&logo=eslint\" />\n    </a>\n    <a href=\"https://prettier.io/\">\n        <img alt=\"Code style prettier\" src=\"https://img.shields.io/badge/code%20style-prettier-f8bc45?style=flat-square&logo=prettier\" />\n    </a>\n</p>\n\n<div align=\"center\">\n    <h4>\n        <a href=\"https://discord.gg/9B9WgGP6YM\">\n            üó£Ô∏è Chat &amp; Support\n        </a>\n    </h4>\n</div>\n\n## Libraries:\n\n‚úîÔ∏è [IncrementalBinaryTree](https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/incremental-merkle-tree.sol/contracts/IncrementalBinaryTree.sol) (Poseidon)\\\n‚úîÔ∏è [IncrementalQuinTree](https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/incremental-merkle-tree.sol/contracts/IncrementalQuinTree.sol) (Poseidon)\n\n> The methods of each library are always the same (i.e `insert`, `update`, `remove`, `verify`).\n\n---\n\n## üõ† Install\n\n### npm or yarn\n\nInstall the `@zk-kit/incremental-merkle-tree.sol` package with npm:\n\n```bash\nnpm i @zk-kit/incremental-merkle-tree.sol --save\n```\n\nor yarn:\n\n```bash\nyarn add @zk-kit/incremental-merkle-tree.sol\n```\n\n## üìú Usage\n\n### Importing and using the library\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\";\n\ncontract Example {\n    using IncrementalBinaryTree for IncrementalTreeData;\n\n    event TreeCreated(bytes32 id, uint8 depth);\n    event LeafInserted(bytes32 indexed treeId, uint256 leaf, uint256 root);\n    event LeafUpdated(bytes32 indexed treeId, uint256 leaf, uint256 root);\n    event LeafRemoved(bytes32 indexed treeId, uint256 leaf, uint256 root);\n\n    mapping(bytes32 => IncrementalTreeData) public trees;\n\n    function createTree(bytes32 _id, uint8 _depth) external {\n        require(trees[_id].depth == 0, \"Example: tree already exists\");\n\n        trees[_id].init(_depth, 0);\n\n        emit TreeCreated(_id, _depth);\n    }\n\n    function insertLeaf(bytes32 _treeId, uint256 _leaf) external {\n        require(trees[_treeId].depth != 0, \"Example: tree does not exist\");\n\n        trees[_treeId].insert(_leaf);\n\n        emit LeafInserted(_treeId, _leaf, trees[_treeId].root);\n    }\n\n    function updateLeaf(\n        bytes32 _treeId,\n        uint256 _leaf,\n        uint256[] calldata _proofSiblings,\n        uint8[] calldata _proofPathIndices\n    ) external {\n        require(trees[_treeId].depth != 0, \"Example: tree does not exist\");\n\n        trees[_treeId].update(_leaf, _proofSiblings, _proofPathIndices);\n\n        emit LeafUpdated(_treeId, _leaf, trees[_treeId].root);\n    }\n\n    function removeLeaf(\n        bytes32 _treeId,\n        uint256 _leaf,\n        uint256[] calldata _proofSiblings,\n        uint8[] calldata _proofPathIndices\n    ) external {\n        require(trees[_treeId].depth != 0, \"Example: tree does not exist\");\n\n        trees[_treeId].remove(_leaf, _proofSiblings, _proofPathIndices);\n\n        emit LeafRemoved(_treeId, _leaf, trees[_treeId].root);\n    }\n}\n\n```\n\n### Creating an Hardhat task to deploy the contract\n\n```typescript\nimport { poseidon_gencontract as poseidonContract } from \"circomlibjs\"\nimport { Contract } from \"ethers\"\nimport { task, types } from \"hardhat/config\"\n\ntask(\"deploy:example\", \"Deploy an Example contract\")\n    .addOptionalParam<boolean>(\"logs\", \"Print the logs\", true, types.boolean)\n    .setAction(async ({ logs }, { ethers }): Promise<Contract> => {\n        const poseidonT3ABI = poseidonContract.generateABI(2)\n        const poseidonT3Bytecode = poseidonContract.createCode(2)\n\n        const [signer] = await ethers.getSigners()\n\n        const PoseidonLibT3Factory = new ethers.ContractFactory(poseidonT3ABI, poseidonT3Bytecode, signer)\n        const poseidonT3Lib = await PoseidonLibT3Factory.deploy()\n\n        await poseidonT3Lib.deployed()\n\n        logs && console.log(`PoseidonT3 library has been deployed to: ${poseidonT3Lib.address}`)\n\n        const IncrementalBinaryTreeLibFactory = await ethers.getContractFactory(\"IncrementalBinaryTree\", {\n            libraries: {\n                PoseidonT3: poseidonT3Lib.address\n            }\n        })\n        const incrementalBinaryTreeLib = await IncrementalBinaryTreeLibFactory.deploy()\n\n        await incrementalBinaryTreeLib.deployed()\n\n        logs && console.log(`IncrementalBinaryTree library has been deployed to: ${incrementalBinaryTreeLib.address}`)\n\n        const ContractFactory = await ethers.getContractFactory(\"Example\", {\n            libraries: {\n                IncrementalBinaryTree: incrementalBinaryTreeLib.address\n            }\n        })\n\n        const contract = await ContractFactory.deploy()\n\n        await contract.deployed()\n\n        logs && console.log(`Example contract has been deployed to: ${contract.address}`)\n\n        return contract\n    })\n```\n\n## Contacts\n\n### Developers\n\n-   e-mail : me@cedoor.dev\n-   github : [@cedoor](https://github.com/cedoor)\n-   website : https://cedoor.dev\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@zk-kit/incremental-merkle-tree.sol/-/incremental-merkle-tree.sol-1.3.3.tgz#ec091912bd6862e978b7b693fcd35b5004d16017",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@zk-kit/incremental-merkle-tree.sol/-/incremental-merkle-tree.sol-1.3.3.tgz",
    "hash": "ec091912bd6862e978b7b693fcd35b5004d16017",
    "integrity": "sha512-Tm0MfrKii0JWgYJnyK0U4tlq69SWJemh16Tv3itvW4G2C7BLzgejnBbWomYPPrDHJBDgMDvIKETnb6/w5RLroQ==",
    "registry": "npm",
    "packageName": "@zk-kit/incremental-merkle-tree.sol",
    "cacheIntegrity": "sha512-Tm0MfrKii0JWgYJnyK0U4tlq69SWJemh16Tv3itvW4G2C7BLzgejnBbWomYPPrDHJBDgMDvIKETnb6/w5RLroQ== sha1-7AkZEr1oYul4t7aT/NNbUATRYBc="
  },
  "registry": "npm",
  "hash": "ec091912bd6862e978b7b693fcd35b5004d16017"
}